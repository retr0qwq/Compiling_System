*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test1.ll'
source_filename = "test1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@counter = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"Hello World\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"SQUARE(%d) = %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Sum = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Counter = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test1.ll'
source_filename = "test1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@counter = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"Hello World\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"SQUARE(%d) = %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Sum = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Counter = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness

# End machine code for function add.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

; Loop:
14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

; Loop:
14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

; Loop:
14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

; Loop:
14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 3, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = mul nsw i32 %7, %8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6, i32 noundef %9)
  %11 = call i32 @add(i32 noundef 5, i32 noundef 7)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 noundef %12)
  store i32 0, i32* %4, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* @counter, align 4
  %20 = add nsw i32 %19, %18
  store i32 %20, i32* @counter, align 4
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %14, !llvm.loop !6

24:                                               ; preds = %14
  %25 = load i32, i32* @counter, align 4
  %26 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 noundef %25)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
208B	  %8:gr64 = MOV64ri @.str.1
224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $rdi = COPY %8:gr64
256B	  $esi = COPY %16:gr32
272B	  $edx = COPY %14:gr32
288B	  $al = MOV8ri 0
304B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
320B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  %11:gr32 = COPY $eax
352B	  %5:gr32 = MOV32ri 5
368B	  %6:gr32 = MOV32ri 7
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %5:gr32
416B	  $esi = COPY %6:gr32
432B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  %7:gr32 = COPY $eax
480B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
496B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
512B	  %0:gr64 = MOV64ri @.str.2
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $rdi = COPY %0:gr64
560B	  $esi = COPY %3:gr32
576B	  $al = MOV8ri 0
592B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
624B	  %2:gr32 = COPY $eax
640B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

656B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

672B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
688B	  JCC_1 %bb.4, 13, implicit $eflags

704B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

720B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
752B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

768B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

784B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
800B	  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
816B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
832B	  JMP_1 %bb.1

848B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

864B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
880B	  %21:gr64 = MOV64ri @.str.3
896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  $rdi = COPY %21:gr64
928B	  $esi = COPY %24:gr32
944B	  $al = MOV8ri 0
960B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  %23:gr32 = COPY $eax
1008B	  %20:gr32 = MOV32r0 implicit-def $eflags
1024B	  $eax = COPY %20:gr32
1040B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
208B	  %8:gr64 = MOV64ri @.str.1
224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  $rdi = COPY %8:gr64
256B	  $esi = COPY %16:gr32
272B	  $edx = COPY %14:gr32
288B	  $al = MOV8ri 0
304B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
320B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  %11:gr32 = COPY $eax
352B	  %5:gr32 = MOV32ri 5
368B	  %6:gr32 = MOV32ri 7
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $edi = COPY %5:gr32
416B	  $esi = COPY %6:gr32
432B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  %7:gr32 = COPY $eax
480B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
496B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
512B	  %0:gr64 = MOV64ri @.str.2
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $rdi = COPY %0:gr64
560B	  $esi = COPY %3:gr32
576B	  $al = MOV8ri 0
592B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
624B	  %2:gr32 = COPY $eax
640B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

656B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

672B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
688B	  JCC_1 %bb.4, 13, implicit $eflags

704B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

720B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
752B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

768B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

784B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
800B	  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
816B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
832B	  JMP_1 %bb.1

848B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

864B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
880B	  %21:gr64 = MOV64ri @.str.3
896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  $rdi = COPY %21:gr64
928B	  $esi = COPY %24:gr32
944B	  $al = MOV8ri 0
960B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
976B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  %23:gr32 = COPY $eax
1008B	  %20:gr32 = MOV32r0 implicit-def $eflags
1024B	  $eax = COPY %20:gr32
1040B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %18:gr32 = COPY $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %16:gr32
  $edx = COPY %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $esi = COPY %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %20:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm killed %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 killed %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm killed %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 killed %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm killed %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 killed %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = IMUL32rm killed %15:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = ADD32ri8 killed %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = COPY killed %15:gr32
  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = COPY killed %29:gr32
  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = COPY killed %33:gr32
  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %17:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %18:gr32 = COPY killed $eax
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = COPY killed %15:gr32
  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %16:gr32
  $edx = COPY killed %14:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %5:gr32 = MOV32ri 5
  %6:gr32 = MOV32ri 7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %0:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %3:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %28:gr32 = COPY killed %29:gr32
  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %32:gr32 = COPY killed %33:gr32
  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  %21:gr64 = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %20:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = COPY killed %15:gr32
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY killed %8:gr64
272B	  $esi = COPY killed %16:gr32
288B	  $edx = COPY killed %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
368B	  %5:gr32 = MOV32ri 5
384B	  %6:gr32 = MOV32ri 7
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = COPY killed %5:gr32
432B	  $esi = COPY killed %6:gr32
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY killed %0:gr64
576B	  $esi = COPY killed %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
752B	  %28:gr32 = COPY killed %29:gr32
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
832B	  %32:gr32 = COPY killed %33:gr32
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY killed %21:gr64
976B	  $esi = COPY killed %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1056B	  %20:gr32 = MOV32r0 implicit-def dead $eflags
1072B	  $eax = COPY killed %20:gr32
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = COPY killed %15:gr32
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY killed %8:gr64
272B	  $esi = COPY killed %16:gr32
288B	  $edx = COPY killed %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
368B	  %5:gr32 = MOV32ri 5
384B	  %6:gr32 = MOV32ri 7
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = COPY killed %5:gr32
432B	  $esi = COPY killed %6:gr32
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY killed %0:gr64
576B	  $esi = COPY killed %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
752B	  %28:gr32 = COPY killed %29:gr32
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
832B	  %32:gr32 = COPY killed %33:gr32
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY killed %21:gr64
976B	  $esi = COPY killed %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1056B	  %20:gr32 = MOV32r0 implicit-def dead $eflags
1072B	  $eax = COPY killed %20:gr32
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = COPY %15:gr32
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
368B	  %5:gr32 = MOV32ri 5
384B	  %6:gr32 = MOV32ri 7
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = COPY %5:gr32
432B	  $esi = COPY %6:gr32
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
752B	  %28:gr32 = COPY %29:gr32
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
832B	  %32:gr32 = COPY %33:gr32
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1056B	  %20:gr32 = MOV32r0 implicit-def dead $eflags
1072B	  $eax = COPY %20:gr32
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
192B	  %14:gr32 = COPY %15:gr32
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
368B	  %5:gr32 = MOV32ri 5
384B	  %6:gr32 = MOV32ri 7
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = COPY %5:gr32
432B	  $esi = COPY %6:gr32
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %29:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
752B	  %28:gr32 = COPY %29:gr32
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %33:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
832B	  %32:gr32 = COPY %33:gr32
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1056B	  %20:gr32 = MOV32r0 implicit-def dead $eflags
1072B	  $eax = COPY %20:gr32
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY killed $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY killed $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY killed $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY killed $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY killed $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %17:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %17:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %18:gr32 = COPY $eax
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  %14:gr32 = IMUL32rm %14:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  %8:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %8:gr64
272B	  $esi = COPY %16:gr32
288B	  $edx = COPY %14:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %11:gr32 = COPY $eax
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %7:gr32 = COPY $eax
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %7:gr32 :: (store (s32) into %ir.3)
512B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  %0:gr64 = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = COPY %0:gr64
576B	  $esi = COPY %3:gr32
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
640B	  dead %2:gr32 = COPY $eax
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  %28:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, %28:gr32 :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  %32:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %32:gr32 :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  %24:gr32 = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  %21:gr64 = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  dead %23:gr32 = COPY $eax
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
160B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
176B	  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
208B	  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 5
432B	  $esi = MOV32ri 7
448B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
512B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
528B	  renamable $rdi = MOV64ri @.str.2
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $al = MOV8ri 0
608B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

672B	bb.1 (%ir-block.14):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

688B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
704B	  JCC_1 %bb.4, 13, implicit killed $eflags

720B	bb.2 (%ir-block.17):
	; predecessors: %bb.1
	  successors: %bb.3

736B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
768B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
784B	  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

800B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

816B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
848B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
864B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
880B	  JMP_1 %bb.1

896B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

912B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
928B	  renamable $rdi = MOV64ri @.str.3
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  $eax = MOV32r0 implicit-def dead $eflags
1088B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
  renamable $edx = IMUL32rm killed renamable $edx(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  $edi = MOV32ri 5
  $esi = MOV32ri 7
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.14):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 5, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.17):
; predecessors: %bb.1
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $noreg, 1, $noreg, @counter, $noreg, implicit-def dead $eflags :: (load (s32) from @counter)
  MOV32mr $noreg, 1, $noreg, @counter, $noreg, killed renamable $eax :: (store (s32) into @counter)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  renamable $esi = MOV32rm $noreg, 1, $noreg, @counter, $noreg :: (load (s32) from @counter)
  renamable $rdi = MOV64ri @.str.3
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

