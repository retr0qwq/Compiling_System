
;; Function add (add, funcdef_no=0, decl_uid=2347, cgraph_uid=1, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a2(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a3(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000

   Insn 17(l0): point = 0
   Insn 16(l0): point = 2
   Insn 12(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 3(l0): point = 12
   Insn 2(l0): point = 14
 a0(r83): [3..4]
 a1(r82): [5..6]
 a2(r85): [7..8]
 a3(r84): [7..10]
Compressing live ranges: from 17 to 6 - 35%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [2..3]
 a2(r85): [4..5]
 a3(r84): [4..5]
  pref0:a0(r83)<-hr0@1500
  regions=1, blocks=3, points=6
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4
Disposition:
    1:r82  l0     0    0:r83  l0     0    3:r84  l0     1    2:r85  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


add

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={1d} r19={1d,6u,2e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} 
;;    total ref usage 46{25d,19u,2e} in 8{8 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test1.c":4:23 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (reg:SI 4 si [ b ])) "test1.c":4:23 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ b ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])) "test1.c":5:14 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])) "test1.c":5:14 75 {*movsi_internal}
     (nil))
(insn 9 8 12 2 (parallel [
            (set (reg:SI 82 [ _3 ])
                (plus:SI (reg:SI 84)
                    (reg:SI 85)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":5:14 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 85)
        (expr_list:REG_DEAD (reg:SI 84)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
                        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32]))
                    (nil))))))
(insn 12 9 16 2 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _3 ])) "test1.c":5:14 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ _3 ])
        (nil)))
(insn 16 12 17 2 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "test1.c":6:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ <retval> ])
        (nil)))
(insn 17 16 0 2 (use (reg/i:SI 0 ax)) "test1.c":6:1 -1
     (nil))

;; Function main (main, funcdef_no=1, decl_uid=2349, cgraph_uid=2, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 51.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r93,l0) best SIREG, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r90,l0) best SIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r82,l0) best DREG, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a6(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a7(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a8(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a10(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a11(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a13(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a14(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 60(l0): point = 0
   Insn 59(l0): point = 2
   Insn 55(l0): point = 4
   Insn 52(l0): point = 6
   Insn 51(l0): point = 8
   Insn 50(l0): point = 10
   Insn 49(l0): point = 12
   Insn 48(l0): point = 14
   Insn 47(l0): point = 16
   Insn 46(l0): point = 18
   Insn 37(l0): point = 21
   Insn 36(l0): point = 23
   Insn 35(l0): point = 25
   Insn 34(l0): point = 27
   Insn 33(l0): point = 29
   Insn 44(l0): point = 32
   Insn 43(l0): point = 34
   Insn 62(l0): point = 37
   Insn 29(l0): point = 39
   Insn 28(l0): point = 41
   Insn 27(l0): point = 43
   Insn 26(l0): point = 45
   Insn 25(l0): point = 47
   Insn 24(l0): point = 49
   Insn 23(l0): point = 51
   Insn 22(l0): point = 53
   Insn 21(l0): point = 55
   Insn 20(l0): point = 57
   Insn 19(l0): point = 59
   Insn 18(l0): point = 61
   Insn 17(l0): point = 63
   Insn 16(l0): point = 65
   Insn 15(l0): point = 67
   Insn 14(l0): point = 69
   Insn 13(l0): point = 71
   Insn 12(l0): point = 73
   Insn 11(l0): point = 75
   Insn 10(l0): point = 77
   Insn 9(l0): point = 79
   Insn 8(l0): point = 81
   Insn 7(l0): point = 83
   Insn 6(l0): point = 85
   Insn 5(l0): point = 87
 a0(r87): [3..4]
 a1(r86): [5..6]
 a2(r96): [13..14]
 a3(r85): [17..18]
 a4(r84): [24..25]
 a5(r95): [26..27]
 a6(r83): [26..29]
 a7(r94): [46..47]
 a8(r93): [50..51]
 a9(r92): [54..55]
 a10(r91): [68..69]
 a11(r90): [72..75]
 a12(r82): [74..77]
 a13(r89): [78..79]
 a14(r88): [86..87]
Compressing live ranges: from 90 to 26 - 28%
Ranges after the compression:
 a0(r87): [0..1]
 a1(r86): [2..3]
 a2(r96): [4..5]
 a3(r85): [6..7]
 a4(r84): [8..9]
 a5(r95): [10..11]
 a6(r83): [10..11]
 a7(r94): [12..13]
 a8(r93): [14..15]
 a9(r92): [16..17]
 a10(r91): [18..19]
 a11(r90): [20..21]
 a12(r82): [20..21]
 a13(r89): [22..23]
 a14(r88): [24..25]
  pref0:a2(r96)<-hr5@1500
  pref1:a7(r94)<-hr5@1500
  pref2:a8(r93)<-hr4@1500
  pref3:a9(r92)<-hr0@1500
  pref4:a10(r91)<-hr5@1500
  pref5:a11(r90)<-hr4@1500
  pref6:a14(r88)<-hr5@1500
  pref7:a0(r87)<-hr0@1500
  pref8:a3(r85)<-hr4@1500
  pref9:a12(r82)<-hr1@1500
  regions=1, blocks=6, points=26
    allocnos=15 (big 0), copies=0, conflicts=0, ranges=15
Disposition:
   12:r82  l0     1    6:r83  l0     1    4:r84  l0     0    3:r85  l0     0
    1:r86  l0     0    0:r87  l0     0   14:r88  l0     0   13:r89  l0     0
   11:r90  l0     0   10:r91  l0     0    9:r92  l0     0    8:r93  l0     0
    7:r94  l0     0    5:r95  l0     0    2:r96  l0     0
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,6u} r1={7d,1u} r2={6d} r4={10d,4u} r5={11d,5u} r6={1d,5u} r7={1d,10u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1d,4u} r17={9d,1u} r18={5d} r19={1d,15u,1e} r20={6d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={6d} r37={6d} r38={5d} r39={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r82={1d,1u} r83={1d,1u,1e} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,2u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} 
;;    total ref usage 456{387d,67u,2e} in 43{38 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x6ffd977a9870 *.LC0>)) "test1.c":9:5 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (reg:DI 88)) "test1.c":9:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x6ffd977a9870 *.LC0>)
            (nil))))
(call_insn 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x6ffd976be800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":9:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])
        (const_int 3 [0x3])) "test1.c":11:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 82 [ _1 ])
                (mult:SI (reg:SI 89)
                    (reg:SI 89)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":12:5 408 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 89)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 11 10 12 2 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 dx)
        (reg:SI 82 [ _1 ])) "test1.c":12:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(insn 13 12 14 2 (set (reg:SI 4 si)
        (reg:SI 90)) "test1.c":12:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x6ffd977a9900 *.LC1>)) "test1.c":12:5 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 91)) "test1.c":12:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x6ffd977a9900 *.LC1>)
            (nil))))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":12:5 77 {*movqi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":12:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "test1.c":14:15 75 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "test1.c":14:15 75 {*movsi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x6ffd977a3800 add>) [0 add S1 A8])
            (const_int 0 [0]))) "test1.c":14:15 824 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 21 20 22 2 (set (reg:SI 92)
        (reg:SI 0 ax)) "test1.c":14:15 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 sum+0 S4 A32])
        (reg:SI 92)) "test1.c":14:15 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 23 22 24 2 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 sum+0 S4 A32])) "test1.c":15:5 75 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg:SI 93)) "test1.c":15:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 25 24 26 2 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x6ffd977a9990 *.LC2>)) "test1.c":15:5 74 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 94)) "test1.c":15:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x6ffd977a9990 *.LC2>)
            (nil))))
(insn 27 26 28 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":15:5 77 {*movqi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":15:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 29 28 62 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":17:14 75 {*movsi_internal}
     (nil))
(jump_insn 62 29 63 2 (set (pc)
        (label_ref 38)) "test1.c":17:5 807 {jump}
     (nil)
 -> 38)
(barrier 63 62 40)
(code_label 40 63 32 3 5 (nil) [1 uses])
(note 32 40 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg:SI 83 [ counter.0_2 ])
        (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])) "test1.c":18:17 75 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "test1.c":18:17 75 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:SI 84 [ _3 ])
                (plus:SI (reg:SI 83 [ counter.0_2 ])
                    (reg:SI 95)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":18:17 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 95)
        (expr_list:REG_DEAD (reg:SI 83 [ counter.0_2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 83 [ counter.0_2 ])
                        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32]))
                    (nil))))))
(insn 36 35 37 3 (set (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])
        (reg:SI 84 [ _3 ])) "test1.c":18:17 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (nil)))
(insn 37 36 38 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":17:29 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 38 37 39 4 4 (nil) [1 uses])
(note 39 38 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 39 44 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
            (const_int 4 [0x4]))) "test1.c":17:23 11 {*cmpsi_1}
     (nil))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "test1.c":17:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 40)
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:SI 85 [ counter.1_4 ])
        (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])) "test1.c":20:5 75 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 4 si)
        (reg:SI 85 [ counter.1_4 ])) "test1.c":20:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ counter.1_4 ])
        (nil)))
(insn 48 47 49 5 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x6ffd977a9a20 *.LC3>)) "test1.c":20:5 74 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 5 di)
        (reg:DI 96)) "test1.c":20:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x6ffd977a9a20 *.LC3>)
            (nil))))
(insn 50 49 51 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":20:5 77 {*movqi_internal}
     (nil))
(call_insn 51 50 52 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":20:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 52 51 55 5 (set (reg:SI 86 [ _16 ])
        (const_int 0 [0])) "test1.c":22:12 75 {*movsi_internal}
     (nil))
(insn 55 52 59 5 (set (reg:SI 87 [ <retval> ])
        (reg:SI 86 [ _16 ])) "test1.c":23:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ _16 ])
        (nil)))
(insn 59 55 60 5 (set (reg/i:SI 0 ax)
        (reg:SI 87 [ <retval> ])) "test1.c":23:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ <retval> ])
        (nil)))
(insn 60 59 0 5 (use (reg/i:SI 0 ax)) "test1.c":23:1 -1
     (nil))
