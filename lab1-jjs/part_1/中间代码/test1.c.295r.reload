
;; Function add (add, funcdef_no=0, decl_uid=2347, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 9
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = 0
   Insn 8: point = 5, n_alt = 0
   Insn 7: point = 6, n_alt = 0
   Insn 3: point = 7, n_alt = 1
   Insn 2: point = 7, n_alt = 1
 r82: [2..3]
 r83: [0..1]
 r84: [4..6]
 r85: [4..5]
Compressing live ranges: from 7 to 6 - 85%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]
 r84: [4..5]
 r85: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


add

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r17={1d} r19={1d,1u,2e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 39{22d,15u,2e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test1.c":4:23 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (reg:SI 4 si [ b ])) "test1.c":4:23 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])) "test1.c":5:14 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])) "test1.c":5:14 75 {*movsi_internal}
     (nil))
(insn 9 8 17 2 (parallel [
            (set (reg:SI 0 ax [orig:82 _3 ] [82])
                (plus:SI (reg:SI 0 ax [85])
                    (reg:SI 1 dx [84])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":5:14 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32]))
        (nil)))
(insn 17 9 19 2 (use (reg/i:SI 0 ax)) "test1.c":6:1 -1
     (nil))
(note 19 17 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=1, decl_uid=2349, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 10:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=99 from oldreg=89, assigning class GENERAL_REGS to r99
   10: {r99:SI=r99:SI*r89:SI;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   65: r99:SI=r89:SI
    Inserting insn reload after:
   66: r82:SI=r99:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 60: point = 0, n_alt = -1
   Insn 59: point = 0, n_alt = -2
   Insn 55: point = 1, n_alt = -2
   Insn 52: point = 3, n_alt = 0
   Insn 51: point = 4, n_alt = 0
   Insn 50: point = 4, n_alt = 3
   Insn 49: point = 4, n_alt = -2
   Insn 48: point = 5, n_alt = 4
   Insn 47: point = 6, n_alt = -2
   Insn 46: point = 7, n_alt = 0
  BB 4
   Insn 44: point = 8, n_alt = -1
   Insn 43: point = 8, n_alt = 0
  BB 2
   Insn 62: point = 8, n_alt = -1
   Insn 29: point = 8, n_alt = 1
   Insn 28: point = 8, n_alt = 0
   Insn 27: point = 8, n_alt = 3
   Insn 26: point = 8, n_alt = -2
   Insn 25: point = 9, n_alt = 4
   Insn 24: point = 10, n_alt = -2
   Insn 23: point = 11, n_alt = 0
   Insn 22: point = 12, n_alt = 1
   Insn 21: point = 13, n_alt = -2
   Insn 20: point = 14, n_alt = 0
   Insn 19: point = 14, n_alt = 0
   Insn 18: point = 14, n_alt = 0
   Insn 17: point = 14, n_alt = 0
   Insn 16: point = 14, n_alt = 3
   Insn 15: point = 14, n_alt = -2
   Insn 14: point = 15, n_alt = 4
   Insn 13: point = 16, n_alt = -2
   Insn 12: point = 17, n_alt = -2
   Insn 11: point = 18, n_alt = 0
   Insn 66: point = 19, n_alt = -2
	Hard reg 1 is preferable by r99 with profit 1000
   Insn 10: point = 21, n_alt = 2
   Insn 65: point = 23, n_alt = -2
	Hard reg 1 is preferable by r99 with profit 1000
	Hard reg 0 is preferable by r99 with profit 1000
   Insn 9: point = 24, n_alt = 0
   Insn 8: point = 25, n_alt = 1
   Insn 7: point = 25, n_alt = 0
   Insn 6: point = 25, n_alt = -2
   Insn 5: point = 26, n_alt = 4
  BB 3
   Insn 37: point = 27, n_alt = 0
   Insn 36: point = 27, n_alt = 1
   Insn 35: point = 28, n_alt = 0
   Insn 34: point = 30, n_alt = 0
   Insn 33: point = 31, n_alt = 0
 r82: [17..19]
 r83: [29..31]
 r84: [27..28]
 r85: [6..7]
 r86: [2..3]
 r87: [0..1]
 r88: [25..26]
 r89: [22..24]
 r90: [16..18]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [8..9]
 r95: [29..30]
 r96: [4..5]
 r99: [20..23]
Compressing live ranges: from 32 to 26 - 81%
Ranges after the compression:
 r82: [16..17]
 r83: [24..25]
 r84: [22..23]
 r85: [6..7]
 r86: [2..3]
 r87: [0..1]
 r88: [20..21]
 r89: [18..19]
 r90: [16..17]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [8..9]
 r95: [24..25]
 r96: [4..5]
 r99: [18..19]

********** Assignment #1: **********

	 Assigning to 99 (cl=GENERAL_REGS, orig=89, freq=3000, tfirst=99, tfreq=3000)...
	   Assign 0 to reload r99 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 46
changing reg in insn 47
changing reg in insn 52
changing reg in insn 55
changing reg in insn 55
changing reg in insn 59
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 34
changing reg in insn 48
changing reg in insn 49
deleting insn with uid = 65.
deleting insn with uid = 12.
deleting insn with uid = 21.
deleting insn with uid = 55.
deleting insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={21d,18u} r1={8d,2u,1e} r2={6d} r4={10d,4u} r5={11d,5u} r6={1d,15u} r7={1d,10u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={9d,1u} r18={5d} r19={1d,1u,1e} r20={6d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={6d} r37={6d} r38={5d} r39={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} 
;;    total ref usage 441{383d,56u,2e} in 40{35 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 0 ax [88])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x6ffd977a9870 *.LC0>)) "test1.c":9:5 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "test1.c":9:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x6ffd977a9870 *.LC0>)
        (nil)))
(call_insn 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x6ffd976be800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":9:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])
        (const_int 3 [0x3])) "test1.c":11:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 10 9 66 2 (parallel [
            (set (reg:SI 0 ax [89])
                (mult:SI (reg:SI 0 ax [89])
                    (reg:SI 0 ax [89])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":12:5 408 {*mulsi3_1}
     (nil))
(insn 66 10 11 2 (set (reg:SI 1 dx [orig:82 _1 ] [82])
        (reg:SI 0 ax [89])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 11 66 13 2 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 a+0 S4 A64])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [90])) "test1.c":12:5 75 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [91])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x6ffd977a9900 *.LC1>)) "test1.c":12:5 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "test1.c":12:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x6ffd977a9900 *.LC1>)
        (nil)))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":12:5 77 {*movqi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":12:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "test1.c":14:15 75 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "test1.c":14:15 75 {*movsi_internal}
     (nil))
(call_insn 20 19 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x6ffd977a3800 add>) [0 add S1 A8])
            (const_int 0 [0]))) "test1.c":14:15 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 22 20 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 sum+0 S4 A32])
        (reg:SI 0 ax [92])) "test1.c":14:15 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 sum+0 S4 A32])) "test1.c":15:5 75 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [93])) "test1.c":15:5 75 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 0 ax [94])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x6ffd977a9990 *.LC2>)) "test1.c":15:5 74 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "test1.c":15:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x6ffd977a9990 *.LC2>)
        (nil)))
(insn 27 26 28 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":15:5 77 {*movqi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":15:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 29 28 62 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":17:14 75 {*movsi_internal}
     (nil))
(jump_insn 62 29 63 2 (set (pc)
        (label_ref 38)) "test1.c":17:5 807 {jump}
     (nil)
 -> 38)
(barrier 63 62 40)
(code_label 40 63 32 3 5 (nil) [1 uses])
(note 32 40 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg:SI 1 dx [orig:83 counter.0_2 ] [83])
        (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])) "test1.c":18:17 75 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "test1.c":18:17 75 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:SI 0 ax [orig:84 _3 ] [84])
                (plus:SI (reg:SI 0 ax [95])
                    (reg:SI 1 dx [orig:83 counter.0_2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":18:17 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:83 counter.0_2 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32]))
        (nil)))
(insn 36 35 37 3 (set (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])
        (reg:SI 0 ax [orig:84 _3 ] [84])) "test1.c":18:17 75 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":17:29 209 {*addsi_1}
     (nil))
(code_label 38 37 39 4 4 (nil) [1 uses])
(note 39 38 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 39 44 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
            (const_int 4 [0x4]))) "test1.c":17:23 11 {*cmpsi_1}
     (nil))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "test1.c":17:23 806 {*jcc}
     (nil)
 -> 40)
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:SI 0 ax [orig:85 counter.1_4 ] [85])
        (mem/c:SI (symbol_ref:DI ("counter") [flags 0x2]  <var_decl 0x6ffd97ef3d80 counter>) [1 counter+0 S4 A32])) "test1.c":20:5 75 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:85 counter.1_4 ] [85])) "test1.c":20:5 75 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 0 ax [96])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x6ffd977a9a20 *.LC3>)) "test1.c":20:5 74 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "test1.c":20:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x6ffd977a9a20 *.LC3>)
        (nil)))
(insn 50 49 51 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":20:5 77 {*movqi_internal}
     (nil))
(call_insn 51 50 52 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x6ffd976be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":20:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 52 51 60 5 (set (reg:SI 0 ax [orig:86 _16 ] [86])
        (const_int 0 [0])) "test1.c":22:12 75 {*movsi_internal}
     (nil))
(insn 60 52 64 5 (use (reg/i:SI 0 ax)) "test1.c":23:1 -1
     (nil))
(note 64 60 0 NOTE_INSN_DELETED)
